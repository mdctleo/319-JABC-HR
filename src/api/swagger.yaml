---
swagger: "2.0"
info:
  description: "This API provides all the functions needed to manage \nthe JABC HR\
    \ system.\n"
  version: "1.0.0"
  title: "JABC"
  contact:
    email: "jabraham9719@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/JABC/1.0.0"
tags:
- name: "Employee"
  description: "Provides access to all employee data and history, manage Performances\
    \ of employees,\nVacations and Documents for the onboarding process\n"
- name: "Reports"
  description: "Provides functions to generate and export reports\n"
- name: "Roles"
  description: "Allows the customization of the employee roles\n"
- name: "Performance"
  description: "Manage the performance records\n"
- name: "Onboarding"
  description: "Manage the onboarding process of new employees\n"
- name: "Vacation"
  description: "Manage the vacation requests from employees\n"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /employee:
    get:
      tags:
      - "Employee"
      summary: "get all the Employees"
      description: "This returns all the active Employees of the system. \nIf [start]\
        \ and [end] are provided, it will return all employees with a birthday between\
        \ those dates\nIf [inactive] is provided this returns the all the Employees\
        \ of the system including the inactive ones.\nIf [term] is provided this returns\
        \ the Employees of the system that match with the [term].\n"
      operationId: "getEmployees"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "term"
        in: "query"
        description: "Search term for filter the data"
        required: false
        type: "string"
      - name: "start"
        in: "query"
        description: "Search employees with a birthday after this date, if this isn't\
          \ provided there won't be any filtering"
        required: false
        type: "string"
        format: "date"
      - name: "end"
        in: "query"
        description: "Search employees with a birthday before this date, if this isn't\
          \ provided there won't be any filtering"
        required: false
        type: "string"
        format: "date"
      - name: "inactive"
        in: "query"
        description: "If [inactive] is provided this returns the all the Employees\
          \ of the system including the inactive ones"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IEmployee"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    post:
      tags:
      - "Employee"
      summary: "creates a new Employee"
      description: "Will create a new Employee with the provided data in body"
      operationId: "createEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "employee"
        description: "Employee data"
        required: true
        schema:
          $ref: "#/definitions/IEmployee"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}:
    get:
      tags:
      - "Employee"
      summary: "gets an specific Employee"
      description: "Will return the Employee that matches with the provided [id]"
      operationId: "getEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IEmployee"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    put:
      tags:
      - "Employee"
      summary: "updates the Employee"
      description: "Will update an Employee with the provided data in body if the\
        \ Employee matches the [id]"
      operationId: "updateEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Employee to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "employee"
        description: "Employee data"
        required: true
        schema:
          $ref: "#/definitions/IEmployee"
      - name: "idAdmin"
        in: "query"
        description: "Who is updating the employee"
        required: false
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    delete:
      tags:
      - "Employee"
      summary: "deletes Employee"
      description: "Will delete (deactivate) an Employee if the Employee matches the\
        \ [id]"
      operationId: "deleteEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Employee to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idAdmin"
        in: "query"
        description: "Who is deleting the employee"
        required: false
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/password:
    post:
      tags:
      - "Employee"
      summary: "updates the password of an employee"
      description: "Will update the password provided in the body"
      operationId: "updateEmployeePassword"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Employee to change password"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "employee"
        description: "Employee with new password"
        required: true
        schema:
          $ref: "#/definitions/IEmployee"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/manager:
    get:
      tags:
      - "Employee"
      summary: "get all the Managers of an employee with the provided [id]"
      description: "This returns all the Employees of the system that manage the employee\
        \ with the [id]. \n"
      operationId: "getManagersByEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Employee with the searched Managers"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IEmployee"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    put:
      tags:
      - "Employee"
      summary: "update all the Managers of an employee with the provided [id]"
      description: "This will delete all previous links to managers of the employee\
        \ with [id] \n"
      operationId: "setManagersOfEmployee"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Employee to set the Managers"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "managers"
        description: "array of ids of the managers"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/manager/{idManager}:
    post:
      tags:
      - "Employee"
      summary: "Links employee to his manager"
      description: "Sets the employee with [id] to be managed by the employee with\
        \ [idManager]"
      operationId: "linkEmployeeManager"
      consumes:
      - "application/octet-stream"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Employee to be managed by another"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idManager"
        in: "path"
        description: "Employee that will manage the employee with [id]"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    delete:
      tags:
      - "Employee"
      summary: "Unlinks employee from his manager"
      description: "Deletes the relation between employee with [id] and the employee\
        \ with [idManager]"
      operationId: "unlinkEmployeeManager"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "Employee to be unmanaged by another"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idManager"
        in: "path"
        description: "Employee that will stop managing the employee with [id]"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/manager/{idManager}:
    get:
      tags:
      - "Employee"
      summary: "get all the Employees that are managed by employee with [idManager]"
      description: "This returns all the Employees that are managed by employee with\
        \ [idManager].\n"
      operationId: "getEmployeesByManager"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "idManager"
        in: "path"
        description: "Employee that will manage the employee with [id]"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IEmployee"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    put:
      tags:
      - "Employee"
      summary: "update all the managed Employees of a manager with the provided [idManager]"
      description: "This will delete all previous links to managers of the employee\
        \ with [idManager] \n"
      operationId: "setEmployeesOfManager"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "idManager"
        in: "path"
        description: "Employee that will manage the employees"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "employees"
        description: "array of ids of the employees that will be managed"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/history:
    get:
      tags:
      - "Employee"
      summary: "get all the history of the employee with [id]"
      description: "This returns all the history data of the employee with [id]. \n"
      operationId: "getEmployeeHistory"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IEmployeeHistory"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/task:
    get:
      tags:
      - "Employee"
      summary: "get all the OnboardingTasks of the employee with [id]"
      description: "This returns all the OnboardingTasks of the system. \nIf [term]\
        \ is provided this returns the OnboardingTasks of the Employee that match\
        \ with the [term]. \n"
      operationId: "getOnboardingTasks"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "term"
        in: "query"
        description: "Search term for filter the data"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IOnboardingTask"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    post:
      tags:
      - "Employee"
      summary: "creates a new OnboardingTask for the employee with [id]"
      description: "Will create a new OnboardingTask with the provided data in body"
      operationId: "createOnboardingTask"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "onboardingTask"
        description: "OnboardingTask data"
        required: true
        schema:
          $ref: "#/definitions/IOnboardingTask"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/task/{idOnboardingTask}:
    put:
      tags:
      - "Employee"
      summary: "completes the OnboardingTask with [idOnboardingTask] for the employee\
        \ with [id]"
      description: "If the OnboardingTask requires a document to be completed, then\
        \ the parameter [document] must be\nprovided to successfully complete the\
        \ OnboardingTask.\n"
      operationId: "completeOnboardingTask"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idOnboardingTask"
        in: "path"
        description: "id of the OnboardingTask to be completed"
        required: true
        type: "integer"
        format: "uint64"
      - name: "document"
        in: "formData"
        description: "The document file filled by the employee."
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/performance/plan:
    get:
      tags:
      - "Employee"
      summary: "get all the PerformancePlans of the employee with [id]"
      description: "This returns all the PerformancePlans of the system.\nIf [term]\
        \ is provided this returns the PerformancePlans of the Employee that match\
        \ with the [term]. \n"
      operationId: "getPerformancePlans"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "term"
        in: "query"
        description: "Search term for filter the data"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IPerformancePlan"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    post:
      tags:
      - "Employee"
      summary: "creates a new PerformancePlan for the employee with [id]"
      description: "Will create a new PerformancePlan with the provided data in body"
      operationId: "createPerformancePlan"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "performance"
        description: "PerformancePlan data"
        required: true
        schema:
          $ref: "#/definitions/IPerformancePlan"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/performance/review:
    get:
      tags:
      - "Employee"
      summary: "get all the PerformanceReviews of the employee with [id]"
      description: "This returns all the PerformanceReviews of the system.\nIf [term]\
        \ is provided this returns the PerformanceReviews of the Employee that match\
        \ with the [term]. \n"
      operationId: "getPerformanceReviews"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "term"
        in: "query"
        description: "Search term for filter the data"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IPerformanceReview"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    post:
      tags:
      - "Employee"
      summary: "creates a new PerformanceReview for the employee with [id]"
      description: "Will create a new PerformanceReview with the provided data in\
        \ body"
      operationId: "createPerformanceReview"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "performance"
        description: "PerformanceReview data"
        required: true
        schema:
          $ref: "#/definitions/IPerformanceReview"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/{id}/vacation:
    get:
      tags:
      - "Employee"
      summary: "get all the Vacations of the employee with [id]"
      description: "This returns all the Vacations of the system. \nIf [term] is provided\
        \ this returns the Vacations of the Employee that match with the [term]. \n"
      operationId: "getVacations"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "term"
        in: "query"
        description: "Search term for filter the data"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IVacation"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
    post:
      tags:
      - "Employee"
      summary: "creates a new Vacation for the employee with [id]"
      description: "Will create a new Vacation with the provided data in body"
      operationId: "createVacation"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Employee"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "vacation"
        description: "Vacation data"
        required: true
        schema:
          $ref: "#/definitions/IVacation"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Employee"
  /employee/token:
    post:
      tags:
      - "Employee"
      summary: "sign in the employee into the system"
      operationId: "login"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "Employee login data"
        required: true
        schema:
          $ref: "#/definitions/ILogin"
      responses:
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ILoginResponse"
      x-swagger-router-controller: "Employee"
  /vacation/{id}:
    get:
      tags:
      - "Vacation"
      summary: "gets an specific Vacation"
      description: "Will return the Vacation that matches with the provided [id] from\
        \ \nthe Employee with [id]\n"
      operationId: "getVacation"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Vacation"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IVacation"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Vacation"
    put:
      tags:
      - "Vacation"
      summary: "updates the Vacation"
      description: "Will update an Vacation with the provided data in body \nif the\
        \ Vacation matches the [id]\n"
      operationId: "updateVacation"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Vacation"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "vacation"
        description: "Vacation data"
        required: true
        schema:
          $ref: "#/definitions/IVacation"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Vacation"
    delete:
      tags:
      - "Vacation"
      summary: "deletes Vacation"
      description: "Will delete the Vacation that matches with the provided [id] from\
        \ \nthe Employee with [id]\n"
      operationId: "deleteVacation"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Vacation"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Vacation"
  /onboarding/task:
    get:
      tags:
      - "Onboarding"
      summary: "gets all the OnboardingTasks"
      description: "Will return all the OnboardingTasks on the system.\nIf [start]\
        \ and [end] are provided, it will return all OnboardingTasks with a due date\
        \ between those dates\nIf [id] is provided, it will return the onboarding\
        \ tasks of an employee that matches that id\nIf [status] is provided, it will\
        \ return the onboarding tasks that matches that status (0:active, 1:done)\n"
      operationId: "getAllOnboardingTasks"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "start"
        in: "query"
        description: "Search onboarding tasks with a due date after this date, if\
          \ this isn't provided there won't be any filtering"
        required: false
        type: "string"
        format: "date"
      - name: "end"
        in: "query"
        description: "Search onboarding tasks with a due date before this date, if\
          \ this isn't provided there won't be any filtering"
        required: false
        type: "string"
        format: "date"
      - name: "id"
        in: "query"
        description: "If provided will return the onboarding tasks of an employee\
          \ that matches that id"
        required: false
        type: "integer"
        format: "uint64"
      - name: "status"
        in: "query"
        description: "If provided will return the onboarding tasks that matches that\
          \ status (0:active, 1:done)"
        required: false
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IOnboardingTask"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /onboarding/task/{id}:
    get:
      tags:
      - "Onboarding"
      summary: "gets an specific OnboardingTask"
      description: "Will return the OnboardingTask that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "getOnboardingTask"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched OnboardingTask"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IOnboardingTask"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    put:
      tags:
      - "Onboarding"
      summary: "updates the OnboardingTask"
      description: "Will update an OnboardingTask with the provided data in body \n\
        if the OnboardingTask matches the [id]\n"
      operationId: "updateOnboardingTask"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched OnboardingTask"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "onboardingTask"
        description: "OnboardingTask data"
        required: true
        schema:
          $ref: "#/definitions/IOnboardingTask"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    delete:
      tags:
      - "Onboarding"
      summary: "deletes OnboardingTask"
      description: "Will delete the OnboardingTask that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "deleteOnboardingTask"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched OnboardingTask"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /onboarding/task/{id}/file:
    get:
      tags:
      - "Onboarding"
      summary: "gets an specific OnboardingTask file"
      description: "Will return the OnboardingTask File that matches with the provided\
        \ [id]\n"
      operationId: "getOnboardingTaskFile"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched OnboardingTask"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "The API responds with a file"
          schema:
            type: "file"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      x-swagger-router-controller: "Onboarding"
  /onboarding/documentType:
    get:
      tags:
      - "Onboarding"
      summary: "get all the DocumentTypes"
      description: "This returns all the DocumentTypes of the system.\n"
      operationId: "getDocumentTypes"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IDocumentType"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    post:
      tags:
      - "Onboarding"
      summary: "creates a new DocumentType"
      description: "Will create a new DocumentType with the provided data in body"
      operationId: "createDocumentType"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "documentType"
        description: "DocumentType data"
        required: true
        schema:
          $ref: "#/definitions/IDocumentType"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /onboarding/documentType/{id}:
    get:
      tags:
      - "Onboarding"
      summary: "gets an specific DocumentType"
      description: "Will return the DocumentType that matches with the provided [id]"
      operationId: "getDocumentType"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched DocumentType"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IDocumentType"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    post:
      tags:
      - "Onboarding"
      summary: "uploads the template to the DocumentType"
      description: "Will update an DocumentType with the provided file as a template\
        \ if the DocumentType matches the [id]"
      operationId: "uploadTemplateDocumentType"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the DocumentType to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - name: "document"
        in: "formData"
        description: "The document file to be used as a template"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    put:
      tags:
      - "Onboarding"
      summary: "updates the DocumentType"
      description: "Will update an DocumentType with the provided data in body if\
        \ the DocumentType matches the [id]"
      operationId: "updateDocumentType"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the DocumentType to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "documentType"
        description: "DocumentType data"
        required: true
        schema:
          $ref: "#/definitions/IDocumentType"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    delete:
      tags:
      - "Onboarding"
      summary: "deletes DocumentType"
      description: "Will delete an DocumentType if the DocumentType matches the [id]"
      operationId: "deleteDocumentType"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the DocumentType to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /onboarding/documentType/{id}/file:
    get:
      tags:
      - "Onboarding"
      summary: "gets an specific DocumentType file"
      description: "Will return the DocumentType File that matches with the provided\
        \ [id]\n"
      operationId: "getDocumentTypeFile"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched DocumentType"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "The API responds with a file"
          schema:
            type: "file"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      x-swagger-router-controller: "Onboarding"
  /onboarding/faq:
    get:
      tags:
      - "Onboarding"
      summary: "get all the FAQs"
      description: "This returns all the FAQs of the system.\n"
      operationId: "getFAQs"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IFAQ"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    post:
      tags:
      - "Onboarding"
      summary: "creates a new FAQ"
      description: "Will create a new FAQ with the provided data in body"
      operationId: "createFAQ"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "faq"
        description: "FAQ data"
        required: true
        schema:
          $ref: "#/definitions/IFAQ"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /onboarding/faq/{id}:
    get:
      tags:
      - "Onboarding"
      summary: "gets an specific FAQ"
      description: "Will return the FAQ that matches with the provided [id]"
      operationId: "getFAQ"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched FAQ"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IFAQ"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    put:
      tags:
      - "Onboarding"
      summary: "updates the FAQ"
      description: "Will update an FAQ with the provided data in body if the FAQ matches\
        \ the [id]"
      operationId: "updateFAQ"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the FAQ to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "faq"
        description: "FAQ data"
        required: true
        schema:
          $ref: "#/definitions/IFAQ"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
    delete:
      tags:
      - "Onboarding"
      summary: "deletes FAQ"
      description: "Will delete an FAQ if the FAQ matches the [id]"
      operationId: "deleteFAQ"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the FAQ to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Onboarding"
  /performance/plan/{id}:
    get:
      tags:
      - "Performance"
      summary: "gets an specific PerformancePlan"
      description: "Will return the PerformancePlan that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "getPerformancePlan"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformancePlan"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IPerformancePlan"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    put:
      tags:
      - "Performance"
      summary: "updates the PerformancePlan"
      description: "Will update an PerformancePlan with the provided data in body\
        \ \nif the PerformancePlan matches the [id]\n"
      operationId: "updatePerformancePlan"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformancePlan"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "performance"
        description: "PerformancePlan data"
        required: true
        schema:
          $ref: "#/definitions/IPerformancePlan"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    delete:
      tags:
      - "Performance"
      summary: "deletes PerformancePlan"
      description: "Will delete the PerformancePlan that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "deletePerformancePlan"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformancePlan"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
  /performance/review/{id}:
    get:
      tags:
      - "Performance"
      summary: "gets an specific PerformanceReview"
      description: "Will return the PerformanceReview that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "getPerformanceReview"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformanceReview"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IPerformanceReview"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    put:
      tags:
      - "Performance"
      summary: "updates the PerformanceReview"
      description: "Will update an PerformanceReview with the provided data in body\
        \ \nif the PerformanceReview matches the [id]\n"
      operationId: "updatePerformanceReview"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformanceReview"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "performance"
        description: "PerformanceReview data"
        required: true
        schema:
          $ref: "#/definitions/IPerformanceReview"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    delete:
      tags:
      - "Performance"
      summary: "deletes PerformanceReview"
      description: "Will delete the PerformanceReview that matches with the provided\
        \ [id] from \nthe Employee with [id]\n"
      operationId: "deletePerformanceReview"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched PerformanceReview"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
  /performance/review/{id}/comment:
    get:
      tags:
      - "Performance"
      summary: "get all the Comments from a PerformanceReview with [id]"
      description: "This returns all the Comments of the PerformanceReview with [id].\n"
      operationId: "getComments"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the PerformanceReview with comments"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IComment"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    post:
      tags:
      - "Performance"
      summary: "creates a new Comment for the PerformanceReview with [id]"
      description: "Will create a new Comment with the provided data in body, to the\
        \ PerformanceReview with [id]"
      operationId: "createComment"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the PerformanceReview to be commented"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "comment"
        description: "Comment data"
        required: true
        schema:
          $ref: "#/definitions/IComment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
  /performance/review/{id}/comment/{idComment}:
    get:
      tags:
      - "Performance"
      summary: "gets an specific Comment"
      description: "Will return the Comment that matches with the provided [idComment]"
      operationId: "getComment"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the PerformanceReview with comments"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idComment"
        in: "path"
        description: "idComment of the searched Comment"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IComment"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    put:
      tags:
      - "Performance"
      summary: "updates the Comment"
      description: "Will update an Comment with the provided data in body if the Comment\
        \ matches the [idComment]"
      operationId: "updateComment"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the PerformanceReview with comments"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idComment"
        in: "path"
        description: "idComment of the Comment to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "comment"
        description: "Comment data"
        required: true
        schema:
          $ref: "#/definitions/IComment"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
    delete:
      tags:
      - "Performance"
      summary: "deletes Comment"
      description: "Will delete an Comment if the Comment matches the [idComment]"
      operationId: "deleteComment"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the PerformanceReview with comments"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idComment"
        in: "path"
        description: "idComment of the Comment to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Performance"
  /role:
    get:
      tags:
      - "Roles"
      summary: "get all the Roles"
      description: "This returns all the Roles of the system.\n"
      operationId: "getRoles"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IRole"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    post:
      tags:
      - "Roles"
      summary: "creates a new Role"
      description: "Will create a new Role with the provided data in body"
      operationId: "createRole"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "role"
        description: "Role data"
        required: true
        schema:
          $ref: "#/definitions/IRole"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
  /role/{id}:
    get:
      tags:
      - "Roles"
      summary: "gets an specific Role"
      description: "Will return the Role that matches with the provided [id]"
      operationId: "getRole"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Role"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IRole"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    put:
      tags:
      - "Roles"
      summary: "updates the Role"
      description: "Will update an Role with the provided data in body if the Role\
        \ matches the [id]"
      operationId: "updateRole"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Role to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "role"
        description: "Role data"
        required: true
        schema:
          $ref: "#/definitions/IRole"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      summary: "deletes Role"
      description: "Will delete an Role if the Role matches the [id]"
      operationId: "deleteRole"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Role to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
  /role/{idRole}/competency:
    get:
      tags:
      - "Roles"
      summary: "get all the Competencys"
      description: "This returns all the Competencys of the system. \n"
      operationId: "getCompetencys"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "idRole"
        in: "path"
        description: "id of the Role with searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ICompetency"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    post:
      tags:
      - "Roles"
      summary: "creates a new Competency"
      description: "Will create a new Competency with the provided data in body"
      operationId: "createCompetency"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - in: "body"
        name: "competency"
        description: "Competency data"
        required: true
        schema:
          $ref: "#/definitions/ICompetency"
      - name: "idRole"
        in: "path"
        description: "id of the Role with searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
  /role/{idRole}/competency/{id}:
    get:
      tags:
      - "Roles"
      summary: "gets an specific Competency"
      description: "Will return the Competency that matches with the provided [id]"
      operationId: "getCompetency"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idRole"
        in: "path"
        description: "id of the Role with searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ICompetency"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    put:
      tags:
      - "Roles"
      summary: "updates the Competency"
      description: "Will update an Competency with the provided data in body if the\
        \ Competency matches the [id]"
      operationId: "updateCompetency"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Competency to be updated"
        required: true
        type: "integer"
        format: "uint64"
      - in: "body"
        name: "competency"
        description: "Competency data"
        required: true
        schema:
          $ref: "#/definitions/ICompetency"
      - name: "idRole"
        in: "path"
        description: "id of the Role with searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
    delete:
      tags:
      - "Roles"
      summary: "deletes Competency"
      description: "Will delete an Competency if the Competency matches the [id]"
      operationId: "deleteCompetency"
      parameters:
      - name: "X-Auth-Token"
        in: "header"
        description: "Auth Token that grants access to the system"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "id of the Competency to be deleted"
        required: true
        type: "integer"
        format: "uint64"
      - name: "idRole"
        in: "path"
        description: "id of the Role with searched Competency"
        required: true
        type: "integer"
        format: "uint64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/IApiResponse"
        401:
          description: "unauthorized access"
          schema:
            $ref: "#/definitions/IApiResponse"
        default:
          description: "bad request"
          schema:
            $ref: "#/definitions/IApiResponse"
      security:
      - AuthToken: []
      x-swagger-router-controller: "Roles"
securityDefinitions:
  AuthToken:
    type: "apiKey"
    name: "X-Auth-Token"
    in: "header"
definitions:
  IApiResponse:
    type: "object"
    required:
    - "message"
    - "responseCode"
    - "type"
    properties:
      responseCode:
        type: "integer"
        format: "int32"
      type:
        type: "string"
        enum:
        - "ERROR"
        - "SUCCESS"
      message:
        type: "string"
        example: "Unauthorized access to the API"
      debugMessage:
        type: "string"
        example: "This is a debug message"
    example:
      debugMessage: "This is a debug message"
      type: "ERROR"
      message: "Unauthorized access to the API"
      responseCode: 0
  IEmployee:
    type: "object"
    required:
    - "adminLevel"
    - "email"
    - "firstname"
    - "fte"
    - "lastname"
    - "sin"
    - "status"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, the unique identifier of the Employee"
        minimum: 0
      sin:
        type: "number"
        format: "uint64"
        description: "SIN, the social insurance number of an employee"
        minimum: 100000000
        maximum: 999999999
      email:
        type: "string"
        format: "email"
        description: "email, used to sign into the system"
        maxLength: 100
      password:
        type: "string"
        format: "password"
        description: "password, used to sign into the system"
        maxLength: 40
        pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[;,#?!@$%^&*:._+¿¡¬]).{8,}$"
      firstname:
        type: "string"
        description: "first name, of an employee"
        maxLength: 100
      lastname:
        type: "string"
        description: "last name, of an employee"
        maxLength: 100
      fte:
        type: "integer"
        format: "uint64"
        description: "FTE, this determines if an employee is working full time or\
          \ not"
        minimum: 0
        maximum: 1
      status:
        type: "integer"
        format: "uint64"
        description: "status, it can be active | inactive | onboarding | probation"
        minimum: 0
        maximum: 3
      adminLevel:
        type: "integer"
        format: "uint64"
        description: "admin level, this restricts the access of the user to the system"
        minimum: 0
        maximum: 2
      salary:
        type: "number"
        description: "salary, this is how much an employee earn per month"
        minimum: 0
      address:
        type: "string"
        description: "address, where does the employee live"
        maxLength: 512
      birthdate:
        type: "string"
        format: "date"
        description: "birthdate, of the employee"
      dateJoined:
        type: "string"
        format: "date"
        description: "date joined, of the employee"
      vacationDays:
        type: "integer"
        format: "uint64"
        description: "total vacation days, allowed to the employee per year"
        minimum: 0
      remainingVacationDays:
        type: "integer"
        format: "uint64"
        description: "remaining vacation days, allowed to the employee on the current\
          \ year"
        minimum: 0
      fkRole:
        type: "integer"
        format: "uint64"
        example: 1
        description: "role ID, Foreign key of the role"
      phoneNumber:
        type: "string"
        description: "phone number, of an employee"
        maxLength: 45
      role:
        $ref: "#/definitions/IRole"
    description: "Employee, contains all the current information of a current or onboarding\
      \ employee\n"
    example:
      firstname: "firstname"
      fkRole: 1
      address: "address"
      birthdate: "2000-01-23"
      role:
        name: "name"
        description: "description"
        competencies:
        - fkRole: 1
          name: "name"
          description: "description"
          id: 1
        - fkRole: 1
          name: "name"
          description: "description"
          id: 1
        id: 1
      adminLevel: 1
      dateJoined: "2000-01-23"
      salary: 0.5637376656633328320111786524648778140544891357421875
      lastname: "lastname"
      password: "password"
      phoneNumber: "phoneNumber"
      remainingVacationDays: 0
      fte: 0
      sin: 172074537.061408221721649169921875
      vacationDays: 0
      id: 1
      email: "email"
      status: 0
  IEmployeeHistory:
    type: "object"
    required:
    - "adminLevel"
    - "createdDate"
    - "email"
    - "firstname"
    - "fkCreator"
    - "fte"
    - "lastname"
    - "sin"
    - "status"
    - "version"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, the unique identifier of the Employee"
        minimum: 0
      sin:
        type: "number"
        format: "uint64"
        description: "SIN, the social insurance number of an employee"
        minimum: 100000000
        maximum: 999999999
      email:
        type: "string"
        format: "email"
        description: "email, used to sign into the system"
        maxLength: 100
      password:
        type: "string"
        format: "password"
        description: "password, used to sign into the system"
        maxLength: 40
        pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[;,#?!@$%^&*:._+¿¡¬]).{8,}$"
      firstname:
        type: "string"
        description: "first name, of an employee"
        maxLength: 100
      lastname:
        type: "string"
        description: "last name, of an employee"
        maxLength: 100
      fte:
        type: "integer"
        format: "uint64"
        description: "FTE, this determines if an employee is working full time or\
          \ not"
        minimum: 0
        maximum: 1
      status:
        type: "integer"
        format: "uint64"
        description: "status, it can be active | inactive | onboarding | probation"
        minimum: 0
        maximum: 3
      adminLevel:
        type: "integer"
        format: "uint64"
        description: "admin level, this restricts the access of the user to the system"
        minimum: 0
        maximum: 2
      version:
        type: "integer"
        format: "uint64"
        example: 1
        description: "version of employee data, at some point"
      fkCreator:
        type: "integer"
        format: "uint64"
        example: 1
        description: "creator ID, the unique identifier of the Employee that updated\
          \ the data of the Employee"
      createdDate:
        type: "string"
        format: "date"
        description: "date of creation, of this version of the employee data"
      salary:
        type: "number"
        description: "salary, this is how much an employee earn per month"
        minimum: 0
      address:
        type: "string"
        description: "address, where does the employee live"
        maxLength: 512
      birthdate:
        type: "string"
        format: "date"
        description: "birthdate, of the employee"
      dateJoined:
        type: "string"
        format: "date"
        description: "date joined, of the employee"
      vacationDays:
        type: "integer"
        format: "uint64"
        description: "total vacation days, allowed to the employee per year"
        minimum: 0
      remainingVacationDays:
        type: "integer"
        format: "uint64"
        description: "remaining vacation days, allowed to the employee on the current\
          \ year"
        minimum: 0
      fkRole:
        type: "integer"
        format: "uint64"
        example: 1
        description: "role ID, Foreign key of the role"
      phoneNumber:
        type: "string"
        description: "phone number, of an employee"
        maxLength: 45
      role:
        $ref: "#/definitions/IRole"
    description: "Employee, contains all the current information of a current or onboarding\
      \ employee\n"
    example:
      firstname: "firstname"
      fkRole: 1
      address: "address"
      birthdate: "2000-01-23"
      role:
        name: "name"
        description: "description"
        competencies:
        - fkRole: 1
          name: "name"
          description: "description"
          id: 1
        - fkRole: 1
          name: "name"
          description: "description"
          id: 1
        id: 1
      adminLevel: 1
      dateJoined: "2000-01-23"
      salary: 0.5637376656633328320111786524648778140544891357421875
      version: 1
      fkCreator: 1
      lastname: "lastname"
      password: "password"
      createdDate: "2000-01-23"
      phoneNumber: "phoneNumber"
      remainingVacationDays: 0
      fte: 0
      sin: 172074537.061408221721649169921875
      vacationDays: 0
      id: 1
      email: "email"
      status: 0
  IRole:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "role ID, the unique identifier of the Role"
        minimum: 0
      name:
        type: "string"
        description: "name, of the role"
        maxLength: 100
      description:
        type: "string"
        description: "description, of the role"
        maxLength: 2512
      competencies:
        type: "array"
        description: "role competencies, contains all the competencies of this role"
        items:
          $ref: "#/definitions/ICompetency"
    description: "Role, is contains all the current information of a current or onboarding\
      \ employee\n"
    example:
      name: "name"
      description: "description"
      competencies:
      - fkRole: 1
        name: "name"
        description: "description"
        id: 1
      - fkRole: 1
        name: "name"
        description: "description"
        id: 1
      id: 1
  ICompetency:
    type: "object"
    required:
    - "fkRole"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "competency ID, the unique identifier of the Competency"
        minimum: 0
      fkRole:
        type: "integer"
        format: "uint64"
        example: 1
        description: "role ID, Foreign key of the role"
      name:
        type: "string"
        description: "name, of the competency"
        maxLength: 100
      description:
        type: "string"
        description: "description, of the competency"
        maxLength: 2512
    description: "Competency, contains info of competencies and objectives that each\
      \ role need to fulfill\n"
    example:
      fkRole: 1
      name: "name"
      description: "description"
      id: 1
  IVacation:
    type: "object"
    required:
    - "date"
    - "fkEmployee"
    - "requestedDays"
    - "requestedStatus"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "vacation ID, the unique identifier of the Vacation"
        minimum: 0
      fkEmployee:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, the unique identifier of the Employee that requests\
          \ the vacation"
      fkApprover:
        type: "integer"
        format: "uint64"
        example: 1
        description: "approver ID, the unique identifier of the Employee that approves\
          \ the vacation request"
      requestedDays:
        type: "integer"
        format: "uint64"
        description: "requested days the number of vacation days the employee requested"
        minimum: 1
      requestedStatus:
        type: "integer"
        format: "uint64"
        description: "vacation request status, the number of vacation days the employee\
          \ requested"
        minimum: 0
        maximum: 2
      date:
        type: "string"
        format: "date"
        description: "date, when the employee requested the vacation"
    description: "Vacation request, contains info of the employee asking for a vaction\
      \ period\n"
    example:
      date: "2000-01-23"
      requestedDays: 1
      fkApprover: 1
      fkEmployee: 1
      id: 1
      requestedStatus: 1
  IOnboardingTask:
    type: "object"
    required:
    - "createdDate"
    - "fkEmployee"
    - "requireDoc"
    - "status"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "onboarding task ID, the unique identifier of the Role"
        minimum: 0
      fkDocumentType:
        type: "integer"
        format: "uint64"
        example: 1
        description: "document template ID, foreign key of the DocumentType of this\
          \ onboarding task"
      fkEmployee:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, foreign key of the Employee that needs to upload\
          \ this onboarding task"
      createdDate:
        type: "string"
        format: "date"
        description: "created date, of this onboarding task"
      dueDate:
        type: "string"
        format: "date"
        description: "due date, of this onboarding task"
      requireDoc:
        type: "integer"
        format: "uint64"
        description: "require doc, controls wether the Onboarding task requires document\
          \ upload or not."
        minimum: 0
        maximum: 1
      status:
        type: "integer"
        format: "uint64"
        description: "status, controls wether the Onboarding task is done or not"
        minimum: 0
        maximum: 1
      expiryDate:
        type: "string"
        format: "date"
        description: "expiry date, of this onboarding task"
      file:
        type: "string"
        description: "link to file, to the file if it is required"
      template:
        type: "string"
        description: "link to template file, if it is provided"
      description:
        type: "string"
        description: "description, of this onboarding task"
        maxLength: 2512
      type:
        $ref: "#/definitions/IDocumentType"
    description: "Onboarding task, required for the onbarding proccess of a new Employee,\
      \ if the property [requireDoc] is\nset to 1, then the OnboardingTask require\
      \ the employee to upload a document, and the fkDocumentType will \ncontain the\
      \ id of the IDocumentType object with the template of the document to be filled\
      \ by the employee. \nOtherwise the [fkDocumentType] property will be null.\n"
    example:
      expiryDate: "2000-01-23"
      createdDate: "2000-01-23"
      file: "file"
      fkDocumentType: 1
      dueDate: "2000-01-23"
      requireDoc: 0
      fkEmployee: 1
      description: "description"
      id: 1
      type:
        file: "file"
        name: "name"
        description: "description"
        id: 1
      status: 0
  IDocumentType:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "document template ID, the unique identifier of the DocumentType"
        minimum: 0
      name:
        type: "string"
        description: "name, of document template"
        maxLength: 100
      description:
        type: "string"
        description: "description, of document template"
        maxLength: 2512
      file:
        type: "string"
        description: "link to file, if the document has a template, this will be the\
          \ link to access it"
    description: "Document template, contains info of the template support document\
      \ for the onboarding process\n"
    example:
      file: "file"
      name: "name"
      description: "description"
      id: 1
  IPerformancePlan:
    type: "object"
    required:
    - "createDate"
    - "endYear"
    - "fkEmployee"
    - "startYear"
    - "status"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance plan ID, the unique identifier of the Performance"
        minimum: 0
      fkEmployee:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, Foreign key of the employee with this performance\
          \ review"
      createDate:
        type: "string"
        format: "date"
        description: "created date, the performance review was created"
      startYear:
        type: "integer"
        format: "uint64"
        example: 2019
        description: "start year, of the plan"
        minimum: 1950
        maximum: 2100
      endYear:
        type: "integer"
        format: "uint64"
        example: 2020
        description: "end year, of the plan"
        minimum: 1950
        maximum: 2100
      status:
        type: "integer"
        format: "uint64"
        description: "status, of the plan"
        minimum: 0
        maximum: 1
      sections:
        type: "array"
        description: "sections, contains all the IPerformanceSections Related to this\
          \ IPerformancePlan"
        items:
          $ref: "#/definitions/IPerformanceSection"
      comments:
        type: "array"
        description: "commentsm contains all the comments of this performance review"
        items:
          $ref: "#/definitions/IComment"
    description: "Work plan, contains info of the sections of a performance plan of\
      \ an employee\n"
    example:
      comments:
      - fkCommenter: 1
        date: "2000-01-23"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        comment: "comment"
        id: 1
      - fkCommenter: 1
        date: "2000-01-23"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        comment: "comment"
        id: 1
      startYear: 2019
      fkEmployee: 1
      id: 1
      endYear: 2020
      sections:
      - sectionName: "sectionName"
        data:
          v_a_l_u_e: "v_a_l_u_e"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        id: 1
      - sectionName: "sectionName"
        data:
          v_a_l_u_e: "v_a_l_u_e"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        id: 1
      createDate: "2000-01-23"
      status: 0
  IPerformanceReview:
    type: "object"
    required:
    - "createDate"
    - "fkEmployee"
    - "fkPerformancePlan"
    - "status"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance review ID, the unique identifier of the Performance"
        minimum: 0
      fkEmployee:
        type: "integer"
        format: "uint64"
        example: 1
        description: "employee ID, Foreign key of the employee with this performance\
          \ review"
      fkPerformancePlan:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance plan ID, Foreign key of the performance plan"
      createDate:
        type: "string"
        format: "date"
        description: "created date, the performance review was created"
      status:
        type: "integer"
        format: "uint64"
        description: "status, of the review"
        minimum: 0
        maximum: 1
      sections:
        type: "array"
        description: "sections, contains all the IPerformanceSections Related to this\
          \ IPerformanceReview"
        items:
          $ref: "#/definitions/IPerformanceSection"
      comments:
        type: "array"
        description: "comments, contains all the comments of this performance review"
        items:
          $ref: "#/definitions/IComment"
    description: "Performance review, contains info of the sections of a performance\
      \ plan of an employee\n"
    example:
      comments:
      - fkCommenter: 1
        date: "2000-01-23"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        comment: "comment"
        id: 1
      - fkCommenter: 1
        date: "2000-01-23"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        comment: "comment"
        id: 1
      fkEmployee: 1
      fkPerformancePlan: 1
      id: 1
      sections:
      - sectionName: "sectionName"
        data:
          v_a_l_u_e: "v_a_l_u_e"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        id: 1
      - sectionName: "sectionName"
        data:
          v_a_l_u_e: "v_a_l_u_e"
        fkPerformanceReview: 1
        fkPerformancePlan: 1
        id: 1
      createDate: "2000-01-23"
      status: 0
  IPerformanceSection:
    type: "object"
    required:
    - "data"
    - "sectionName"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "section ID, the unique identifier of the Performance"
        minimum: 0
      data:
        $ref: "#/definitions/IPerformanceSection_data"
      sectionName:
        type: "string"
        description: "section name, of this performance section"
        maxLength: 100
      fkPerformancePlan:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance plan ID, the unique identifier of the Performance\
          \ Plan that owns this section"
      fkPerformanceReview:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance review ID, the unique identifier of the Performance\
          \ Review that owns this section"
    description: "Performance section, a JSON object containing all the information\
      \ of a section in either PerformancePlan or PerformanceReview\n"
    example:
      sectionName: "sectionName"
      data:
        v_a_l_u_e: "v_a_l_u_e"
      fkPerformanceReview: 1
      fkPerformancePlan: 1
      id: 1
  IComment:
    type: "object"
    required:
    - "comment"
    - "date"
    - "fkCommenter"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "comment ID, the unique identifier of the Comment"
        minimum: 0
      fkPerformancePlan:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance plan ID, Foreign key of PerformancePlan that has\
          \ this Comment"
      fkPerformanceReview:
        type: "integer"
        format: "uint64"
        example: 1
        description: "performance review ID, Foreign key of PerformanceReview that\
          \ has this Comment"
      fkCommenter:
        type: "integer"
        format: "uint64"
        example: 1
        description: "commenter ID, Foreign key of Employee that created the Comment"
      comment:
        type: "string"
        description: "comment, text of this comment"
        maxLength: 5000
      date:
        type: "string"
        format: "date"
        description: "date, when the Comment was created"
    description: "Comment, contains what another employee thinks about the performance\
      \ record of another employee\n"
    example:
      fkCommenter: 1
      date: "2000-01-23"
      fkPerformanceReview: 1
      fkPerformancePlan: 1
      comment: "comment"
      id: 1
  IFAQ:
    type: "object"
    required:
    - "answer"
    - "question"
    properties:
      id:
        type: "integer"
        format: "uint64"
        example: 1
        description: "FAQ ID, the unique identifier of the FAQ"
        minimum: 0
      question:
        type: "string"
        description: "description, of this FAQ"
        maxLength: 512
      answer:
        type: "string"
        description: "answer, of this FAQ"
        maxLength: 2512
    description: "Frequently Asked Question, contains a question and answer, to help\
      \ the employee while onboarding\n"
    example:
      question: "question"
      answer: "answer"
      id: 1
  ILogin:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
        description: "email, used to sign into the system"
        maxLength: 100
      password:
        type: "string"
        format: "password"
        description: "password, used to sign into the system"
        maxLength: 40
        pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[;,#?!@$%^&*:._+¿¡¬]).{8,}$"
    description: "Login, represents the basic info to logged into the system"
    example:
      password: "password"
      email: "email"
  ILoginResponse:
    type: "object"
    required:
    - "message"
    - "responseCode"
    - "type"
    properties:
      responseCode:
        type: "integer"
        format: "int32"
      type:
        type: "string"
        enum:
        - "ERROR"
        - "SUCCESS"
      message:
        type: "string"
      debugMessage:
        type: "string"
      token:
        type: "string"
      employee:
        $ref: "#/definitions/IEmployee"
    description: "The data returned by the login path contains the employee info as\
      \ well as the auth token"
    example:
      debugMessage: "debugMessage"
      type: "ERROR"
      message: "message"
      employee:
        firstname: "firstname"
        fkRole: 1
        address: "address"
        birthdate: "2000-01-23"
        role:
          name: "name"
          description: "description"
          competencies:
          - fkRole: 1
            name: "name"
            description: "description"
            id: 1
          - fkRole: 1
            name: "name"
            description: "description"
            id: 1
          id: 1
        adminLevel: 1
        dateJoined: "2000-01-23"
        salary: 0.5637376656633328320111786524648778140544891357421875
        lastname: "lastname"
        password: "password"
        phoneNumber: "phoneNumber"
        remainingVacationDays: 0
        fte: 0
        sin: 172074537.061408221721649169921875
        vacationDays: 0
        id: 1
        email: "email"
        status: 0
      responseCode: 0
      token: "token"
  IPerformanceSection_data:
    properties:
      v_a_l_u_e:
        type: "string"
    description: "data, the object that represents all the data of this performance\
      \ section"
    example:
      v_a_l_u_e: "v_a_l_u_e"
parameters:
  securityAuthToken:
    name: "X-Auth-Token"
    in: "header"
    description: "Auth Token that grants access to the system"
    required: false
    type: "string"
  term:
    name: "term"
    in: "query"
    description: "Search term for filter the data"
    required: false
    type: "string"
responses:
  SuccessfulResponse:
    description: "successful operation"
    schema:
      $ref: "#/definitions/IApiResponse"
  ErrorResponse:
    description: "bad request"
    schema:
      $ref: "#/definitions/IApiResponse"
  NoAccessResponse:
    description: "unauthorized access"
    schema:
      $ref: "#/definitions/IApiResponse"
