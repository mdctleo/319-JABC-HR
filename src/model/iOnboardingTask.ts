/**
 * JABC
 * This API provides all the functions needed to manage  the JABC HR system. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jabraham9719@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { IDocumentType } from './iDocumentType';


/**
 * An onboarding task required for the onbarding proccess of a new Employee, if the property [requireDoc] is set to 1, then the OnboardingTask require the employee to upload a document, and the fkDocumentType will  contain the id of the IDocumentType object with the template of the document to be filled by the employee.  Otherwise the [fkDocumentType] property will be null. 
 */
export interface IOnboardingTask { 
    /**
     * The unique identifier of the Role
     */
    id: number;
    /**
     * The foreign key  of the DocumentType of this Document
     */
    fkDocumentType?: number;
    /**
     * The foreign key  of the Employee that needs to upload this Document
     */
    fkEmployee: number;
    /**
     * The created date of this Document
     */
    createdDate: string;
    /**
     * The due date of this Document
     */
    dueDate: string;
    /**
     * Wether the Onboarding task requires document upload or not.
     */
    requireDoc: number;
    /**
     * The expiry date of this Document
     */
    expiryDate?: string;
    /**
     * The link to the file if it is required
     */
    file?: string;
    description?: string;
    type?: IDocumentType;
}

export class OnboardingTask implements IOnboardingTask{
    /**
     * The unique identifier of the Role
     */
    id: number;
    /**
     * The foreign key  of the DocumentType of this Document
     */
    fkDocumentType?: number;
    /**
     * The foreign key  of the Employee that needs to upload this Document
     */
    fkEmployee: number;
    /**
     * The created date of this Document
     */
    createdDate: string;
    /**
     * The due date of this Document
     */
    dueDate: string;
    /**
     * Wether the Onboarding task requires document upload or not.
     */
    requireDoc: number;
    /**
     * The expiry date of this Document
     */
    expiryDate?: string;
    /**
     * The link to the file if it is required
     */
    file?: string;
    description?: string;
    type?: IDocumentType;

    constructor(rawOnboardingTask: any){
        this.id = rawOnboardingTask.SUPPORT_DOC_ID;
        this.fkDocumentType = rawOnboardingTask.TYPE_ID;
        this.fkEmployee = rawOnboardingTask.EMPLOYEE_ID;
        this.createdDate = rawOnboardingTask.CREATED_DATE;
        this.dueDate = rawOnboardingTask.DUE_DATE;
        this.expiryDate = rawOnboardingTask.EXPIRY_DATE;
        this.file = rawOnboardingTask.ACTUAL_FILE;
        this.description = rawOnboardingTask.DESCRIPTION;
    }

    static OnboardingTasks(rawOnboardingTasks: any[]){
        let documents: IOnboardingTask[] = [];
        for(let rawOnboardingTask of rawOnboardingTasks){
            documents.push(new OnboardingTask(rawOnboardingTask))
        }
        return documents
    }
}