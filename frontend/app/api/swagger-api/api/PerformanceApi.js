/**
 * JABC
 * This API provides all the functions needed to manage  the JABC HR system. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jabraham9719@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IApiResponse from '../model/IApiResponse';
import IComment from '../model/IComment';
import IPerformance from '../model/IPerformance';

/**
* Performance service.
* @module api/PerformanceApi
* @version 1.0.0
*/
export default class PerformanceApi {

    /**
    * Constructs a new PerformanceApi. 
    * @alias module:api/PerformanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * creates a new Comment for the Performance with [id]
     * Will create a new Comment with the provided data in body, to the Performance with [id]
     * @param {Number} id id of the Performance to be commented
     * @param {module:model/IComment} comment Comment data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IApiResponse} and HTTP response
     */
    createCommentWithHttpInfo(id, comment, opts) {
      opts = opts || {};
      let postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling createComment");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IApiResponse;

      return this.apiClient.callApi(
        '/performance/{id}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * creates a new Comment for the Performance with [id]
     * Will create a new Comment with the provided data in body, to the Performance with [id]
     * @param {Number} id id of the Performance to be commented
     * @param {module:model/IComment} comment Comment data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IApiResponse}
     */
    createComment(id, comment, opts) {
      return this.createCommentWithHttpInfo(id, comment, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deletes Comment
     * Will delete an Comment if the Comment matches the [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the Comment to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IApiResponse} and HTTP response
     */
    deleteCommentWithHttpInfo(id, idComment, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComment");
      }

      // verify the required parameter 'idComment' is set
      if (idComment === undefined || idComment === null) {
        throw new Error("Missing the required parameter 'idComment' when calling deleteComment");
      }


      let pathParams = {
        'id': id,
        'idComment': idComment
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IApiResponse;

      return this.apiClient.callApi(
        '/performance/{id}/comment/{idComment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * deletes Comment
     * Will delete an Comment if the Comment matches the [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the Comment to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IApiResponse}
     */
    deleteComment(id, idComment, opts) {
      return this.deleteCommentWithHttpInfo(id, idComment, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deletes Performance
     * Will delete the Performance that matches with the provided [id] from  the Employee with [id] 
     * @param {Number} id id of the searched Performance
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IApiResponse} and HTTP response
     */
    deletePerformanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePerformance");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IApiResponse;

      return this.apiClient.callApi(
        '/performance/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * deletes Performance
     * Will delete the Performance that matches with the provided [id] from  the Employee with [id] 
     * @param {Number} id id of the searched Performance
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IApiResponse}
     */
    deletePerformance(id, opts) {
      return this.deletePerformanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * gets an specific Comment
     * Will return the Comment that matches with the provided [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the searched Comment
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IComment} and HTTP response
     */
    getCommentWithHttpInfo(id, idComment, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComment");
      }

      // verify the required parameter 'idComment' is set
      if (idComment === undefined || idComment === null) {
        throw new Error("Missing the required parameter 'idComment' when calling getComment");
      }


      let pathParams = {
        'id': id,
        'idComment': idComment
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IComment;

      return this.apiClient.callApi(
        '/performance/{id}/comment/{idComment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * gets an specific Comment
     * Will return the Comment that matches with the provided [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the searched Comment
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IComment}
     */
    getComment(id, idComment, opts) {
      return this.getCommentWithHttpInfo(id, idComment, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get all the Comments from a Performance with [id]
     * This returns all the Comments of the Performance with [id]. 
     * @param {Number} id id of the Performance with comments
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/IComment>} and HTTP response
     */
    getCommentsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComments");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IComment];

      return this.apiClient.callApi(
        '/performance/{id}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get all the Comments from a Performance with [id]
     * This returns all the Comments of the Performance with [id]. 
     * @param {Number} id id of the Performance with comments
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/IComment>}
     */
    getComments(id, opts) {
      return this.getCommentsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * gets an specific Performance
     * Will return the Performance that matches with the provided [id] from  the Employee with [id] 
     * @param {Number} id id of the searched Performance
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IPerformance} and HTTP response
     */
    getPerformanceWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPerformance");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPerformance;

      return this.apiClient.callApi(
        '/performance/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * gets an specific Performance
     * Will return the Performance that matches with the provided [id] from  the Employee with [id] 
     * @param {Number} id id of the searched Performance
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IPerformance}
     */
    getPerformance(id, opts) {
      return this.getPerformanceWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates the Comment
     * Will update an Comment with the provided data in body if the Comment matches the [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the Comment to be updated
     * @param {module:model/IComment} comment Comment data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IApiResponse} and HTTP response
     */
    updateCommentWithHttpInfo(id, idComment, comment, opts) {
      opts = opts || {};
      let postBody = comment;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateComment");
      }

      // verify the required parameter 'idComment' is set
      if (idComment === undefined || idComment === null) {
        throw new Error("Missing the required parameter 'idComment' when calling updateComment");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling updateComment");
      }


      let pathParams = {
        'id': id,
        'idComment': idComment
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IApiResponse;

      return this.apiClient.callApi(
        '/performance/{id}/comment/{idComment}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates the Comment
     * Will update an Comment with the provided data in body if the Comment matches the [idComment]
     * @param {Number} id id of the Performance with comments
     * @param {Number} idComment idComment of the Comment to be updated
     * @param {module:model/IComment} comment Comment data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IApiResponse}
     */
    updateComment(id, idComment, comment, opts) {
      return this.updateCommentWithHttpInfo(id, idComment, comment, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updates the Performance
     * Will update an Performance with the provided data in body  if the Performance matches the [id] 
     * @param {Number} id id of the searched Performance
     * @param {module:model/IPerformance} performance Performance data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IApiResponse} and HTTP response
     */
    updatePerformanceWithHttpInfo(id, performance, opts) {
      opts = opts || {};
      let postBody = performance;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePerformance");
      }

      // verify the required parameter 'performance' is set
      if (performance === undefined || performance === null) {
        throw new Error("Missing the required parameter 'performance' when calling updatePerformance");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Auth-Token': opts['xAuthToken']
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IApiResponse;

      return this.apiClient.callApi(
        '/performance/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * updates the Performance
     * Will update an Performance with the provided data in body  if the Performance matches the [id] 
     * @param {Number} id id of the searched Performance
     * @param {module:model/IPerformance} performance Performance data
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAuthToken Auth Token that grants access to the system
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IApiResponse}
     */
    updatePerformance(id, performance, opts) {
      return this.updatePerformanceWithHttpInfo(id, performance, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
